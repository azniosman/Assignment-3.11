# Default values for azni-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global values applied to all resources
global:
  # Environment can be development, staging, production
  environment: development

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# MySQL specific configuration
mysql:
  # For security, these values should be overridden with actual values
  # These will be stored in Kubernetes secrets
  rootPassword: "" # Will generate random password if empty
  database: "azni_db"
  user: "azni_user"
  password: "" # Will generate random password if empty

  # MySQL image configuration
  image:
    repository: mysql
    tag: "8.0"
    pullPolicy: IfNotPresent

  # MySQL service configuration
  service:
    type: ClusterIP
    port: 3306

  # Persistence configuration
  persistence:
    enabled: true
    storageClass: "gp2"
    size: 10Gi
    accessMode: ReadWriteOnce

  # MySQL configuration
  config:
    maxConnections: 200
    innodbBufferPoolSize: "128M"

# Frontend application configuration
frontend:
  enabled: true
  replicaCount: 2

  image:
    repository: nginx
    tag: "1.21"
    pullPolicy: IfNotPresent

  service:
    type: LoadBalancer
    port: 80
    targetPort: 80

  # Frontend specific resources
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# Network policy configuration
networkPolicy:
  enabled: false
  additionalIngressRules: []
  egressRules: []

# Validation hooks for pre/post deployment checks
validationHooks:
  enabled: false
  image:
    repository: busybox
    tag: "latest"
    pullPolicy: IfNotPresent

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: LoadBalancer
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  annotations: {}

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    # Ensure secure TLS connections
    kubernetes.io/tls-acme: "true"
    # Additional security annotations
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: azni-app.example.com
      paths:
        - path: /
          pathType: Prefix
  # TLS configuration for secure connections
  tls:
    - secretName: azni-app-tls
      hosts:
        - azni-app.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Affinity rules for enhanced availability
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - azni-app
          topologyKey: kubernetes.io/hostname

# Node selector for targeting specific nodes
nodeSelector: {}

# Tolerations for scheduling on specific nodes
tolerations: []
